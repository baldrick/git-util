#!/bin/sh

LOG_LEVEL_ALL=0
LOG_LEVEL_FATAL=10
LOG_LEVEL_WARN=20
LOG_LEVEL_TERSE=30
LOG_LEVEL_VERBOSE=40

log_date()
{
    echo -n `date +"%d-%b-%Y %H:%M:%S"`
}

log()
{
    this_log_level=$1
    if [ `xlate_log_word_to_number $this_log_level` -le $log_level ]
    then
        shift
        echo "`log_date` $this_log_level: $*"
    fi
}

flog()
{
    this_log_level=$1
    if [ `xlate_log_word_to_number $this_log_level` -le $log_level ]
    then
        shift
	LOGFILE=$1
	shift
	message_date=`log_date`
        echo "$message_date $this_log_level: $*"
        echo "$message_date $this_log_level: $*" >>$LOGFILE
    fi
}

log_nnl()
{
    if [ `xlate_log_word_to_number $1` -le $log_level ]
    then
        shift
        echo -n "`log_date` $this_log_level: $*"
    fi
}

xlate_log_word_to_number()
{
    level=$LOG_LEVEL_ALL
    case $1 in
        fatal)   level=$LOG_LEVEL_FATAL;;
	warn)    level=$LOG_LEVEL_WARN;;
	terse)   level=$LOG_LEVEL_TERSE;;
	verbose) level=$LOG_LEVEL_VERBOSE;;
    esac
    echo $level
}

usage()
{
    log fatal "Usage: $0 push|pull -r remote repo -s source branch -d destination branch -l log level directory1 directory2 ... directoryN"
    log fatal "remote repo defaults to origin"
    log fatal "source branch defaults to all branches"
    log fatal "destination branch defaults to all branches"
    log fatal "directory defaults to the current directory"
    log fatal "log level defaults to warn; can be one of fatal, warn, terse, verbose"
    exit -1
}

init()
{
    export log_level=$LOG_LEVEL_TERSE
    export remote_repo=origin
    export source_branch=
    export dest_branch=
    export separator=
    export user=
    export svn_repo=
}

parse_opts()
{
    init

    command=$1
    shift
    (( shift = shift + 1 ))

    while getopts r:s:d:l:u:v: option
    do
        case $option in
            r) remote_repo=$OPTARG
               (( shift = shift + 2 ))
               ;;
            s) source_branch=$OPTARG
               separator=:
               (( shift = shift + 2 ))
               ;;
            d) dest_branch=$OPTARG
               separator=:
               (( shift = shift + 2 ))
               ;;
	    l) log_level=`xlate_log_word_to_number $OPTARG`
	       (( shift = shift + 2 ))
	       ;;
	    u) user=$OPTARG
               (( shift = shift + 2 ))
               ;;
	    v) svn_repo=$OPTARG
               (( shift = shift + 2 ))
               ;;
            *) usage;;
        esac
    done
}

check_for_invalid_directories()
{
    star_directories=`ls -Al "$1" | grep ^d | grep \* | wc -l`
    if [ $star_directories -gt 0 ]
    then
        echo "Cannot cope with directory names containing *"
	usage
    fi
}
